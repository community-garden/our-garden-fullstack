import { ApolloServer, gql } from "apollo-server-express"
import dotenv from "dotenv"
import express from "express"
import expressPino from "express-pino-logger"
import * as fs from "fs"
// @ts-ignore
import Keycloak, {GrantedRequest} from "keycloak-connect"
import { KeycloakContext, KeycloakSchemaDirectives,KeycloakTypeDefs } from "keycloak-connect-graphql"
import neo4j, { Driver } from "neo4j-driver"
import { makeAugmentedSchema } from "neo4j-graphql-js"
import path from "path"
import pino from "pino"
import PinoColada from "pino-colada"

import { typeDefs } from "./graphql-schema"
import { initializeDatabase } from "./initialize"

export const logger = pino( {
  level: process.env.LOG_LEVEL || "info",
  prettifier: PinoColada,
  prettyPrint: {
    levelFirst: true,
  },
} )
const expressLogger = expressPino( { logger } )

// Specify host, port and path for GraphQL endpoint
const port = process.env.GRAPHQL_SERVER_PORT || 4001
const graphqlPath = process.env.GRAPHQL_SERVER_PATH || "/graphql"
const host = process.env.GRAPHQL_SERVER_HOST || "0.0.0.0"

// set environment variables from .env
dotenv.config()

const app = express()
const keycloakConfig = JSON.parse( fs.readFileSync( path.resolve( __dirname, "../config/keycloak.json" )).toString())
const keycloak = new Keycloak( keycloakConfig )

app.use( expressLogger )
app.use( keycloak.middleware( {
  admin: graphqlPath
} ))
app.use( graphqlPath, keycloak.middleware())

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */

const helloGQL = `
    type Query {
        hello: String @hasRole(role: "developer")
    }
`

const schema = makeAugmentedSchema( {
  typeDefs:  `${KeycloakTypeDefs}\n${typeDefs}`,
  config: {
    query: {
      exclude: ["RatingCount"],
    },
    mutation: {
      exclude: ["RatingCount"],
    },
  },
} )

/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */
const neo4jdriver = neo4j.driver(
  process.env.NEO4J_URI || "bolt://localhost:7687",
  neo4j.auth.basic(
    process.env.NEO4J_USER || "neo4j",
    process.env.NEO4J_PASSWORD || "neo4j"
  ),
  {
    encrypted: process.env.NEO4J_ENCRYPTED ? "ENCRYPTION_ON" : "ENCRYPTION_OFF",
  }
)

/*
 * Perform any database initialization steps such as
 * creating constraints or ensuring indexes are online
 *
 */
const init = async ( driver: Driver ) => {
  await initializeDatabase( driver )
}

/*
 * We catch any errors that occur during initialization
 * to handle cases where we still want the API to start
 * regardless, such as running with a read only user.
 * In this case, ensure that any desired initialization steps
 * have occurred
 */

init( neo4jdriver )

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */
const server = new ApolloServer( {
  typeDefs: [KeycloakTypeDefs, helloGQL],
  resolvers: {
    Query: {
      hello: () => {
        return "Hello World"
      }
    }
  },
  context: ( {req} ) => {return {
    kauth: new KeycloakContext( {req: req as GrantedRequest} ),
    driver: neo4jdriver,
    neo4jDatabase: process.env.NEO4J_DATABASE }},
  schemaDirectives: KeycloakSchemaDirectives,
  introspection: true,
  playground: true,
} )


/*
 * Optionally, apply Express middleware for authentication, etc
 * This also also allows us to specify a path for the GraphQL endpoint
 */
server.applyMiddleware( { app, path: graphqlPath } )

app.listen( { host, port, path: graphqlPath }, () => {
  logger.info( `GraphQL server ready at http://${host}:${port}${graphqlPath}` )
} )
