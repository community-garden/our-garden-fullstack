import "dotenv/config"

import { ApolloServer } from "apollo-server-express"
import express from "express"
import expressPino from "express-pino-logger"
import * as fs from "fs"
import * as http from "http"
import Keycloak from "keycloak-connect"
import {
  GrantedRequest,
  KeycloakContext,
  KeycloakSchemaDirectives,
  KeycloakTypeDefs,
} from "keycloak-connect-graphql"
import { makeAugmentedSchema } from "neo4j-graphql-js"
import path from "path"
import pino from "pino"
import PinoColada from "pino-colada"
import webPush from "web-push"

import { useWebdavServer } from "./caldav"
import { neo4jdriver } from "./config/neo4j"
import { resolvers, typeDefs } from "./graphql"
import { initializeDatabase } from "./schema/neo4j/initialize"

//dotenv.config()

export const logger = pino( {
  level: process.env.LOG_LEVEL || "info",
  prettifier: PinoColada,
  prettyPrint: {
    levelFirst: true,
  },
} )
const expressLogger = expressPino( { logger } )

// Specify host, port and path for GraphQL endpoint
const port = process.env.GRAPHQL_SERVER_PORT || 4001
const graphqlPath = process.env.GRAPHQL_SERVER_PATH || "/graphql"
const host = process.env.GRAPHQL_SERVER_HOST || "0.0.0.0"

// set environment variables from .env

const app = express()
app.use( expressLogger )

useWebdavServer( app, "/calendar" )

const keycloakConfig = JSON.parse(
  fs.readFileSync( path.resolve( __dirname, "../config/keycloak.json" )).toString()
)
const keycloak = new Keycloak( keycloakConfig )
app.use(
  keycloak.middleware( {
    admin: graphqlPath,
  } )
)
app.use( graphqlPath, keycloak.middleware())


//app.use( cors())
//app.use( bodyParser.json())
webPush.setVapidDetails( `mailto:${process.env.WEB_PUSH_MAIL}`, process.env.PUBLIC_VAPID_KEY, process.env.PRIVATE_VAPID_KEY )
//app.post( "/reg", keycloak.protect(), subscriptionRequestHandler )

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */

const schema = makeAugmentedSchema( {
  typeDefs: `${KeycloakTypeDefs}\n${typeDefs}`,
  schemaDirectives: KeycloakSchemaDirectives,
  resolvers,
  config: {
    query: {
      exclude: ["RatingCount"],
    },
    mutation: {
      exclude: ["RatingCount"],
    },
  },
} )

/*
 * Perform any database initialization steps such as
 * creating constraints or ensuring indexes are online
 *
 * We catch any errors that occur during initialization
 * to handle cases where we still want the API to start
 * regardless, such as running with a read only user.
 * In this case, ensure that any desired initialization steps
 * have occurred
 */

initializeDatabase( neo4jdriver )

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */
const server = new ApolloServer( {
  schema,
  context: ( { req } ) => {
    return {
      kauth: new KeycloakContext( { req: req as GrantedRequest } ),
      driver: neo4jdriver,
      neo4jDatabase: process.env.NEO4J_DATABASE,
    }
  },
  introspection: true,
  playground: true,
  subscriptions: {
    path: "/graphql"
  }
} )

/*
 * Optionally, apply Express middleware for authentication, etc
 * This also also allows us to specify a path for the GraphQL endpoint
 */
server.applyMiddleware( { app, path: graphqlPath } )
const httpServer = http.createServer( app )
server.installSubscriptionHandlers( httpServer )

httpServer.listen( { host, port, path: graphqlPath }, () => {
  logger.info( `GraphQL server ready at http://${host}:${port}${graphqlPath}` )
  logger.info( `GraphQL Subsciptions ready at ws://${host}:${port}${server.subscriptionsPath}` )
} )
