type User {
   _id: Long!
   label: String!
   neo4jImportId: String!
   type: String!
   assigned: [WateringTask] @relation(name: "assigned", direction: OUT)
   available: [WateringTask] @relation(name: "available", direction: OUT)
   changerequests_requested_by: [ChangeRequest] @relation(name: "requested_by", direction: IN)
   changerequests_requested_to: [ChangeRequest] @relation(name: "requested_to", direction: IN)
   logevents_triggered_by: [LogEvent] @relation(name: "triggered_by", direction: IN)
}

type WateringTask {
   _id: Long!
   date: Date!
   done: Boolean
   neo4jImportId: String!
   type: String!
   users_assigned: [User] @relation(name: "assigned", direction: IN) @hasRole(role: "developer")
   changerequests_requested_for: [ChangeRequest] @relation(name: "requested_for", direction: IN)
   changerequests_requested_new_task: [ChangeRequest] @relation(name: "requested_new_task", direction: IN)
   logevents_refers_to: [LogEvent] @relation(name: "refers_to", direction: IN)
   users_available: [User] @relation(name: "available", direction: IN) @hasRole(role: "developer")
}

type ChangeRequest {
   _id: Long!
   label: String!
   neo4jImportId: String!
   type: String!
   requested_by: [User] @relation(name: "requested_by", direction: OUT)
   requested_for: [WateringTask] @relation(name: "requested_for", direction: OUT)
   requested_to: [User] @relation(name: "requested_to", direction: OUT)
   requested_new_task: [WateringTask] @relation(name: "requested_new_task", direction: OUT)
}

type LogEvent {
   _id: Long!
   date: String!
   label: String!
   neo4jImportId: String!
   type: String!
   triggered_by: [User] @relation(name: "triggered_by", direction: OUT)
   refers_to: [WateringTask] @relation(name: "refers_to", direction: OUT)
}

type Mutation {
   seedNeo4jFromJSON: Boolean
   setUserAvailability(dates: [Date]!): Boolean
}
